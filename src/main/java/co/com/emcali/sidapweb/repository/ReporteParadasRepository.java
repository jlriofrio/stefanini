package co.com.emcali.sidapweb.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import co.com.emcali.sidapweb.dto.ReporteParadasDTO;
import co.com.emcali.sidapweb.model.ReporteParadas;


@Repository
public interface ReporteParadasRepository extends JpaRepository<ReporteParadas, String> {

	@Query(nativeQuery = true, value = "SELECT DISTINCT T1.NOMBRE,TO_CHAR(T2.FECHA_INICIO_PARADA,'YYYY') AÑO,TO_CHAR(T2.FECHA_INICIO_PARADA,'MM') MES,TO_CHAR(T2.FECHA_INICIO_PARADA,'MONTH') AS MESLETRAS,TO_CHAR(T2.FECHA_INICIO_PARADA,'DD-MM-YYYY') FECHA_EVENTO,TO_CHAR(T2.FECHA_INICIO_PARADA,'HH24:MI') HORA_INICIO_EVENTO,TO_CHAR(T2.FECHA_FINAL_PARADA,'HH24:MI') HORA_FIN_EVENTO,TRUNC(ROUND((T2.FECHA_FINAL_PARADA - T2.FECHA_INICIO_PARADA)*24),3) DURACION_EVENTO_HORAS,TRUNC(ROUND(((T2.FECHA_FINAL_PARADA - T2.FECHA_INICIO_PARADA)*24)*60),3) DURACION_EVENTO_HHMM,T2.EVENTO_PARADA,T2.SUSPENSION,NVL(TO_CHAR(T2.FECHA_INICIO_SUSPENSION,'DD-MM-YYYY'),'') FECHA_INICIO_SUSPENSION,NVL(TO_CHAR(T2.FECHA_INICIO_SUSPENSION,'HH24:MI'),'') HORA_INICIO_SUSPENSION, NVL(TO_CHAR(T2.FECHA_FINAL_SUSPENSION,'HH24:MI'),'') HORA_FINAL_SUSPENSION,NVL(T2.CODIGO_SUI,' ') CODIGO_SUI,(SELECT COUNT(*)CANT FROM PARADA_PLANTA T3 WHERE T2.SUSPENSION = 'S' AND T2.COD_PLANTA = T3.COD_PLANTA  AND T2.FECHA_INICIO_PARADA = T3.FECHA_INICIO_PARADA)  NUM_PARADAS_SUSP,NVL(T2.NOTAS,' ')NOTAS	FROM PLANTA T1 INNER JOIN PARADA_PLANTA T2 ON T1.IDPLANTA = T2.COD_PLANTA WHERE TRIM(TO_CHAR(T2.FECHA_INICIO_PARADA,'MONTH')) = :mes")
	List<ReporteParadasDTO> findByMes(@Param(value = "mes")String mes);
	
	@Query(nativeQuery = true, value = "SELECT DISTINCT T1.NOMBRE,TO_CHAR(T2.FECHA_INICIO_PARADA,'YYYY') AÑO,TO_CHAR(T2.FECHA_INICIO_PARADA,'MM') MES,TO_CHAR(T2.FECHA_INICIO_PARADA,'MONTH') AS MESLETRAS,TO_CHAR(T2.FECHA_INICIO_PARADA,'DD-MM-YYYY') FECHA_EVENTO,TO_CHAR(T2.FECHA_INICIO_PARADA,'HH24:MI') HORA_INICIO_EVENTO,TO_CHAR(T2.FECHA_FINAL_PARADA,'HH24:MI') HORA_FIN_EVENTO,TRUNC(ROUND((T2.FECHA_FINAL_PARADA - T2.FECHA_INICIO_PARADA)*24),3) DURACION_EVENTO_HORAS,TRUNC(ROUND(((T2.FECHA_FINAL_PARADA - T2.FECHA_INICIO_PARADA)*24)*60),3) DURACION_EVENTO_HHMM,T2.EVENTO_PARADA,T2.SUSPENSION,NVL(TO_CHAR(T2.FECHA_INICIO_SUSPENSION,'DD-MM-YYYY'),'') FECHA_INICIO_SUSPENSION,NVL(TO_CHAR(T2.FECHA_INICIO_SUSPENSION,'HH24:MI'),'') HORA_INICIO_SUSPENSION, NVL(TO_CHAR(T2.FECHA_FINAL_SUSPENSION,'HH24:MI'),'') HORA_FINAL_SUSPENSION,NVL(T2.CODIGO_SUI,' ') CODIGO_SUI,(SELECT COUNT(*)CANT FROM PARADA_PLANTA T3 WHERE T2.SUSPENSION = 'S' AND T2.COD_PLANTA = T3.COD_PLANTA  AND T2.FECHA_INICIO_PARADA = T3.FECHA_INICIO_PARADA)  NUM_PARADAS_SUSP,NVL(T2.NOTAS,' ')NOTAS	FROM PLANTA T1 INNER JOIN PARADA_PLANTA T2 ON T1.IDPLANTA = T2.COD_PLANTA WHERE TRIM(TO_CHAR(T2.FECHA_INICIO_PARADA,'YYYY')) = :anio")
	List<ReporteParadasDTO> findByAnio(@Param(value = "anio")String anio);

	
	@Query(nativeQuery = true, value = "SELECT DISTINCT T1.NOMBRE,TO_CHAR(T2.FECHA_INICIO_PARADA,'YYYY') AÑO,TO_CHAR(T2.FECHA_INICIO_PARADA,'MM') MES,TO_CHAR(T2.FECHA_INICIO_PARADA,'MONTH') AS MESLETRAS,TO_CHAR(T2.FECHA_INICIO_PARADA,'DD-MM-YYYY') FECHA_EVENTO,TO_CHAR(T2.FECHA_INICIO_PARADA,'HH24:MI') HORA_INICIO_EVENTO,TO_CHAR(T2.FECHA_FINAL_PARADA,'HH24:MI') HORA_FIN_EVENTO,TRUNC(ROUND((T2.FECHA_FINAL_PARADA - T2.FECHA_INICIO_PARADA)*24),3) DURACION_EVENTO_HORAS,TRUNC(ROUND(((T2.FECHA_FINAL_PARADA - T2.FECHA_INICIO_PARADA)*24)*60),3) DURACION_EVENTO_HHMM,T2.EVENTO_PARADA,T2.SUSPENSION,NVL(TO_CHAR(T2.FECHA_INICIO_SUSPENSION,'DD-MM-YYYY'),'') FECHA_INICIO_SUSPENSION,NVL(TO_CHAR(T2.FECHA_INICIO_SUSPENSION,'HH24:MI'),'') HORA_INICIO_SUSPENSION, NVL(TO_CHAR(T2.FECHA_FINAL_SUSPENSION,'HH24:MI'),'') HORA_FINAL_SUSPENSION,NVL(T2.CODIGO_SUI,' ') CODIGO_SUI,(SELECT COUNT(*)CANT FROM PARADA_PLANTA T3 WHERE T2.SUSPENSION = 'S' AND T2.COD_PLANTA = T3.COD_PLANTA  AND T2.FECHA_INICIO_PARADA = T3.FECHA_INICIO_PARADA)  NUM_PARADAS_SUSP,NVL(T2.NOTAS,' ')NOTAS	FROM PLANTA T1 INNER JOIN PARADA_PLANTA T2 ON T1.IDPLANTA = T2.COD_PLANTA WHERE TRIM(T1.NOMBRE) = :planta")
	List<ReporteParadasDTO> findByPlanta(@Param(value = "planta")String planta);

	
}
